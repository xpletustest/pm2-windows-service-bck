#!node --harmony

'use strict';

const
  { checkValidOnFailure, checkValidResetFailure} = require("../src/validation"),
  { log, error } = require("../src/logging");

const args = require('yargs')
        .usage('Usage: $0 -n <service_name> [-i <service_id>] [-e <exe_name>] \n    [-d <service_description] [-l <log_path> ] [-r <duration>]\n    [-f <onfailures>] [-w <workingdir>] [-a <account>]\n    [-p <password>] [--unattended] [-pp <pathprefix>]')
        .alias('i', 'id')
        .string('i')
        .describe('i', 'id of the service to install\n    (if not specified, <service_name> will be used)')
        .alias('n', 'name')
        .describe('n', '(display-) name of the service to install')
        .string('n')
        .demandOption('n')
        .alias('e', 'exeName')
        .string('e')
        .describe('e', 'name of executable that will be created \n(without .exe)\n    (if not specified, <service_id> will be used)')
        .alias('d', 'description')
        .describe('d', 'description of the service')
        .string('d')
        .alias('l', 'logpath')
        .describe('l', 'full path of folder to store log files')
        .string('l')
        .alias('u', 'unattended')
        .describe('u', 'install unattended')
        .boolean('u')
        .alias('r', 'resetfailure')
        .describe('r', 'controls the timing in which\n    Windows SCM resets the failure count.')
        .string('r')
        .alias('f', 'onfailure')
        .describe('f', 'controls the behaviour when\n    the process launched by winsw fails.')
        .string('f')
        .alias('w', 'workingdir')
        .describe('w', 'service working directory')
        .string('w')
        .alias('a', 'account')
        .describe('a', 'account to use for service')
        .string('a')
        .alias('p', 'password')
        .describe('p', 'password for account to use for service \n(requires -a)')
        .string('p')
        .alias('pp', 'pathprefix')
        .describe('pp', 'value to use as a prefix for the PATH environment variable (eg: "PATH=prefix;%PATH%")')
        .string('pp')        
        .alias('spf', 'stopparentfirst')
        .describe('spf', 'pass stopparentfirst flag to node-windows')
        .boolean('spf')
        .epilog('Syntax:\n'+
        '  <onfailures> syntax: "<action>;<delay>,<action>;<delay>"\n'+
        '    (a list of <action>;<delay> pairs, each pair separated by comma\'s)\n'+
        '    (each <action> must be followed by a <delay> separated by a semicolon)\n'+
        '  <duration> syntax: "30 secs"\n'+
        '    (number followed by <unit_suffix> separated by single space)\n'+
        '  <delay> uses the same syntax as <duration>\n'+
        '  <action> can be one of the following values:\n'+
        '    "restart", "reboot" or "none"\n'+
        '  <unit_suffix> can be one of the following values:\n'+
        '    "sec", "secs", "min", "mins", "hour" ,"hours", "day" or "days"')
        .check((args, _) => {
            if (args.r) {
                checkValidResetFailure(args.r);
            }
            if (args.f) {
                checkValidOnFailure(args.f);
            }
            if (args.p) {
                if (!args.a) {
                    throw new Error("Missing parameter: password needs to be combined with: account");
                }
            }
            return true;
        })
        .argv;

const pm2ws = require('../src/index');

const config = (({name, id, exeName, description, logpath, unattended, onfailure, resetfailure, workingdir, account, password, pathprefix, stopparentfirst}) =>
    ({name, id, description, exeName, logpath, unattended, onfailure, resetfailure, workingdir, account, password, pathprefix, stopparentfirst}))(args);

pm2ws.install(config).then(_ => {
    log('PM2 service installed and started.');
}, err => {
    error('Installation failed:'+ err);
    process.exit((err && err.code) || 1);
});
